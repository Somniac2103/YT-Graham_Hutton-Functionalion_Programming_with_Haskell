FP13- INTERACTIVE PROGRAMMING
CHAPTER 10

Haskell programs are pure math functions
Haskell has no side effects
Interactive programs have side effects

Use type system to keep the pure section(Function) seperate from the unpure section(interactive)

IO a 

Type of action that return a value of type a 

IO Char *Type of Actions that return a character.

IO () *Type of purely side effecting actions that return no result value.

BASIC ACTIONS 

Standard library provides three primitives:

getChar :: IO Char
putChar :: Char -> IO()
return :: a -> IO a 

SEQUENCING

act :: IO (Char,Char)

act = do  x <- getChar
          getChar
          y <- getChar
          return (x,y)


DERIVED PRIMITIVES 

*Read a string from the keyboard

getLine :: IO string
getLine = do  x <- getChar
              if x == '\n' then
                return[]
              else
                do xs <-getLine
                  return (x:xs)

*Writing a string to the screen

putStr :: String -> IO ()
putStr []     = retunr()
putStr (x:xs) = do  putChar x 
                    putStr xs

*Writing a string and moving to a new getLine

putStrLn :: String -> IO ()
PutStrLn xs = do  putStr xs
                  putChar '\n'

Example

strlen :: IO ()
strlen = do putStr "Enter a string: "
            xs <- getLine
            putStr " The string has "
            putStr (show (length xs))
            putStrln " characters

HANGMAN

Rules:
  One player secretly types in a word.

  The other player tries to deduce the word, by entering a sequence of guesses.

  For each guess, the computer imdicates which letters in the secret word occur in the guess.

hangman :: IO ()
hangman = do  putStrLn "Think of a word: "
              word <- sgetLine
              putStrLn "Try to guess it:"
              play word


sgetLine :: IO String
sgetLine = do x <- getCh
              if  x == '\n' then
                  do  putChar x
                      return []
              else
                  do  putChar '_'
                      xs <- sgetLine
                      return (x:xs)

import System.IO

getCh :: IO Char
getCh = do  hSetEcho stdin False
            x <- getChar
            hSetEcho stdin True
            return x

play :: String -> IO ()
play word =
  do  putStr "? "
      guess <- getLine
      if  guess == word then
          putStrLn "You got it!"
      else
          do  putStrLn (match word guess)
              play word

match :: String -> String ->
match xs ys = [if elem x ys then x else '-' | x <- xs]